{
  "author": {
    "name": "Pascal Deschenes",
    "email": "pdeschen@rassemblr.com",
    "url": "http://blog.rassemblr.com"
  },
  "name": "camelot",
  "description": "A node wrapper for webcam controller providing configurable async frame grabbing.",
  "version": "0.0.4",
  "keywords": [
    "webcam",
    "cam",
    "frame"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/pdeschen/camelot.git"
  },
  "bugs": {
    "url": "http://github.com/pdeschen/camelot/issues",
    "email": "pdeschen+camelot@gmail.com"
  },
  "main": "camelot",
  "engines": {
    "node": ">=v0.6.x <=0.8.x"
  },
  "dependencies": {
    "node-uuid": "1.3.x",
    "winston": ">=0.3.3 =<0.6.2"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node test.js"
  },
  "readme": "\nA [node](http://nodejs.org) wrapper for\n[fswebcam](https://github.com/fsphil/fswebcam) controller providing\nconfigurable async frame grabbing. Grab frames, receive frame events!\n\n[![build status](https://secure.travis-ci.org/pdeschen/camelot.png)](http://travis-ci.org/pdeschen/camelot)\n\nHow it works\n------------\n\nOnce grabbing starts ( *grab , frames are periodically grabbed off the\nweb cam (`/dev/videoX`) depending on the provided frequency option.\nWithin Camelot, once a frame is grabbed, an event is emitted ( `on\n(‘frame’, …)` ) containing the binary frame. Also, instead of relying\non event emission, a callback can also be passed to the `grab()`\nfunction, which will apply the callback upon frame grabbing. As per\nconvensional wisdom, an error event will also be emitted upon Error (\n`on (‘error’, …)` ).\n\nExamples\n--------\n\n    var Camelot = require('./camelot.js');\n\n    var camelot = new Camelot( {\n      'rotate' : '180',\n      'flip' : 'v'\n    });\n\n    camelot.on('frame', function (image) {\n      console.log('frame received!');\n    });\n\n    camelot.on('error', function (err) {\n      console.log(err);\n    });\n\n    camelot.grab( {\n      'title' : 'Camelot',\n      'font' : 'Arial:24',\n      'frequency' : 1    \n    });\n\nFeatures\n--------\n\n-   Infinit frame grabbing based on frequency (in sec).\n-   Banner\n-   Png/Jpeg\n-   Rotation\n-   Resolution\n\n### Supported Capture Options\n\n        focus : 'auto',\n        brightness : 0,\n        contrast : 136,\n        saturation : 150,\n        hue : 0,\n        gamma : 100,\n        sharpness : 50\n\nwith default values.\n\nChangeLog\n---------\n\n### 0.0.4\n* Port event emitting to v0.8\n** event emitting\n** sys v. util\n** path v. fs\n** travis continuous integration\n\n### 0.0.3\n* Initial public release\n\nInstallation\n------------\n\n### Requirements\n\nThis module assumes you have a working binary of\n[fswebcam](https://github.com/fsphil/fswebcam) along with font\nmanagement library and associated font path definition (e.g.\n`GDFONTPATH`). This module has been solely tested on Ubuntu with a\n[Rocketfish 8MP USB HD\nRF-HDWEB](http://www.rocketfishproducts.com/products/computers/RF-HDWEB.html)\nwebcam but should work with any webcam supported by the v4l library.\n\n### Git Clone\n\n    $ git clone git://github.com/pdeschen/camelot.git\n\n### Install from npm\n\n    $ sudo npm install camelot [-g]\n\nTodos\n-----\n\n-   Instead of relying on fswebcam binary, implement node native module\n    using v4l.\n-   Since a webcam is a limited resource, a worker pool (of size 1) \n    should be used to queue grabbing jobs.\n\nLicense\n-------\n\n(MIT license)\n\nCopyright © 2011 Pascal Deschenes\n[pdeschen@gmail.com](mailto:pdeschen@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n“Software”), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "homepage": "https://github.com/pdeschen/camelot",
  "_id": "camelot@0.0.4",
  "_from": "camelot@"
}
